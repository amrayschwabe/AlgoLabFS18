#include <iostream>
#include <vector>
#include <boost/graph/adjacency_list.hpp>
#include <boost/graph/kruskal_min_spanning_tree.hpp>

using namespace std;
using namespace boost;

typedef adjacency_list<vecS, vecS, directedS, no_property, property<edge_weight_t, int>> Graph;
typedef property_map<Graph, edge_weight_t>::type WeightMap;
typedef graph_traits<Graph>::vertex_descriptor   Vertex;
typedef graph_traits<Graph>::edge_descriptor Edge;
typedef graph_traits<Graph>::edge_iterator EdgeIt;

void testcase() {
  int n,m;
  cin >> n >> m;
  Graph G(n);
  WeightMap wm = get(edge_weight, G);
  for (int i = 0; i < m; i++) {
    int u,v,w;
    cin >> u >> v >> w;
    Edge e; bool success;
    tie(e, success) = add_edge(u, v, G);
    wm[e] = w;
  }

}

int main() {
  int t; cin >> t;
  while (t--) {
    testcase();
  }
}
